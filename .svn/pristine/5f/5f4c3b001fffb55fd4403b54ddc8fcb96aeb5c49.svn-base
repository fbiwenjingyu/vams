package com.pd.right.model;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.pd.system.framework.PageToExample;

public class RoleResExample extends PageToExample {

	/**
	 * This field was generated by Abator for iBATIS. This field corresponds to the database table ROLE_RES
	 * @abatorgenerated  Thu Jul 04 09:08:40 CST 2013
	 */
	protected String orderByClause;
	/**
	 * This field was generated by Abator for iBATIS. This field corresponds to the database table ROLE_RES
	 * @abatorgenerated  Thu Jul 04 09:08:40 CST 2013
	 */
	protected List oredCriteria;

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table ROLE_RES
	 * @abatorgenerated  Thu Jul 04 09:08:40 CST 2013
	 */
	public RoleResExample() {
		oredCriteria = new ArrayList();
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table ROLE_RES
	 * @abatorgenerated  Thu Jul 04 09:08:40 CST 2013
	 */
	protected RoleResExample(RoleResExample example) {
		this.orderByClause = example.orderByClause;
		this.oredCriteria = example.oredCriteria;
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table ROLE_RES
	 * @abatorgenerated  Thu Jul 04 09:08:40 CST 2013
	 */
	public void setOrderByClause(String orderByClause) {
		this.orderByClause = orderByClause;
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table ROLE_RES
	 * @abatorgenerated  Thu Jul 04 09:08:40 CST 2013
	 */
	public String getOrderByClause() {
		return orderByClause;
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table ROLE_RES
	 * @abatorgenerated  Thu Jul 04 09:08:40 CST 2013
	 */
	public List getOredCriteria() {
		return oredCriteria;
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table ROLE_RES
	 * @abatorgenerated  Thu Jul 04 09:08:40 CST 2013
	 */
	public void or(Criteria criteria) {
		oredCriteria.add(criteria);
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table ROLE_RES
	 * @abatorgenerated  Thu Jul 04 09:08:40 CST 2013
	 */
	public Criteria createCriteria() {
		Criteria criteria = createCriteriaInternal();
		if (oredCriteria.size() == 0) {
			oredCriteria.add(criteria);
		}
		return criteria;
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table ROLE_RES
	 * @abatorgenerated  Thu Jul 04 09:08:40 CST 2013
	 */
	protected Criteria createCriteriaInternal() {
		Criteria criteria = new Criteria();
		return criteria;
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table ROLE_RES
	 * @abatorgenerated  Thu Jul 04 09:08:40 CST 2013
	 */
	public void clear() {
		oredCriteria.clear();
	}

	/**
	 * This class was generated by Abator for iBATIS. This class corresponds to the database table ROLE_RES
	 * @abatorgenerated  Thu Jul 04 09:08:40 CST 2013
	 */
	public static class Criteria {
		protected List criteriaWithoutValue;
		protected List criteriaWithSingleValue;
		protected List criteriaWithListValue;
		protected List criteriaWithBetweenValue;

		protected Criteria() {
			super();
			criteriaWithoutValue = new ArrayList();
			criteriaWithSingleValue = new ArrayList();
			criteriaWithListValue = new ArrayList();
			criteriaWithBetweenValue = new ArrayList();
		}

		public boolean isValid() {
			return criteriaWithoutValue.size() > 0
					|| criteriaWithSingleValue.size() > 0
					|| criteriaWithListValue.size() > 0
					|| criteriaWithBetweenValue.size() > 0;
		}

		public List getCriteriaWithoutValue() {
			return criteriaWithoutValue;
		}

		public List getCriteriaWithSingleValue() {
			return criteriaWithSingleValue;
		}

		public List getCriteriaWithListValue() {
			return criteriaWithListValue;
		}

		public List getCriteriaWithBetweenValue() {
			return criteriaWithBetweenValue;
		}

		protected void addCriterion(String condition) {
			if (condition == null) {
				throw new RuntimeException("Value for condition cannot be null");
			}
			criteriaWithoutValue.add(condition);
		}

		protected void addCriterion(String condition, Object value,
				String property) {
			if (value == null) {
				throw new RuntimeException("Value for " + property
						+ " cannot be null");
			}
			Map map = new HashMap();
			map.put("condition", condition);
			map.put("value", value);
			criteriaWithSingleValue.add(map);
		}

		protected void addCriterion(String condition, List values,
				String property) {
			if (values == null || values.size() == 0) {
				throw new RuntimeException("Value list for " + property
						+ " cannot be null or empty");
			}
			Map map = new HashMap();
			map.put("condition", condition);
			map.put("values", values);
			criteriaWithListValue.add(map);
		}

		protected void addCriterion(String condition, Object value1,
				Object value2, String property) {
			if (value1 == null || value2 == null) {
				throw new RuntimeException("Between values for " + property
						+ " cannot be null");
			}
			List list = new ArrayList();
			list.add(value1);
			list.add(value2);
			Map map = new HashMap();
			map.put("condition", condition);
			map.put("values", list);
			criteriaWithBetweenValue.add(map);
		}

		public Criteria andResidIsNull() {
			addCriterion("RESID is null");
			return this;
		}

		public Criteria andResidIsNotNull() {
			addCriterion("RESID is not null");
			return this;
		}

		public Criteria andResidEqualTo(String value) {
			addCriterion("RESID =", value, "resid");
			return this;
		}

		public Criteria andResidNotEqualTo(String value) {
			addCriterion("RESID <>", value, "resid");
			return this;
		}

		public Criteria andResidGreaterThan(String value) {
			addCriterion("RESID >", value, "resid");
			return this;
		}

		public Criteria andResidGreaterThanOrEqualTo(String value) {
			addCriterion("RESID >=", value, "resid");
			return this;
		}

		public Criteria andResidLessThan(String value) {
			addCriterion("RESID <", value, "resid");
			return this;
		}

		public Criteria andResidLessThanOrEqualTo(String value) {
			addCriterion("RESID <=", value, "resid");
			return this;
		}

		public Criteria andResidLike(String value) {
			addCriterion("RESID like", value, "resid");
			return this;
		}

		public Criteria andResidNotLike(String value) {
			addCriterion("RESID not like", value, "resid");
			return this;
		}

		public Criteria andResidIn(List values) {
			addCriterion("RESID in", values, "resid");
			return this;
		}

		public Criteria andResidNotIn(List values) {
			addCriterion("RESID not in", values, "resid");
			return this;
		}

		public Criteria andResidBetween(String value1, String value2) {
			addCriterion("RESID between", value1, value2, "resid");
			return this;
		}

		public Criteria andResidNotBetween(String value1, String value2) {
			addCriterion("RESID not between", value1, value2, "resid");
			return this;
		}

		public Criteria andRoleidIsNull() {
			addCriterion("ROLEID is null");
			return this;
		}

		public Criteria andRoleidIsNotNull() {
			addCriterion("ROLEID is not null");
			return this;
		}

		public Criteria andRoleidEqualTo(Long value) {
			addCriterion("ROLEID =", value, "roleid");
			return this;
		}

		public Criteria andRoleidNotEqualTo(Long value) {
			addCriterion("ROLEID <>", value, "roleid");
			return this;
		}

		public Criteria andRoleidGreaterThan(Long value) {
			addCriterion("ROLEID >", value, "roleid");
			return this;
		}

		public Criteria andRoleidGreaterThanOrEqualTo(Long value) {
			addCriterion("ROLEID >=", value, "roleid");
			return this;
		}

		public Criteria andRoleidLessThan(Long value) {
			addCriterion("ROLEID <", value, "roleid");
			return this;
		}

		public Criteria andRoleidLessThanOrEqualTo(Long value) {
			addCriterion("ROLEID <=", value, "roleid");
			return this;
		}

		public Criteria andRoleidIn(List values) {
			addCriterion("ROLEID in", values, "roleid");
			return this;
		}

		public Criteria andRoleidNotIn(List values) {
			addCriterion("ROLEID not in", values, "roleid");
			return this;
		}

		public Criteria andRoleidBetween(Long value1, Long value2) {
			addCriterion("ROLEID between", value1, value2, "roleid");
			return this;
		}

		public Criteria andRoleidNotBetween(Long value1, Long value2) {
			addCriterion("ROLEID not between", value1, value2, "roleid");
			return this;
		}

		public Criteria andBzIsNull() {
			addCriterion("BZ is null");
			return this;
		}

		public Criteria andBzIsNotNull() {
			addCriterion("BZ is not null");
			return this;
		}

		public Criteria andBzEqualTo(String value) {
			addCriterion("BZ =", value, "bz");
			return this;
		}

		public Criteria andBzNotEqualTo(String value) {
			addCriterion("BZ <>", value, "bz");
			return this;
		}

		public Criteria andBzGreaterThan(String value) {
			addCriterion("BZ >", value, "bz");
			return this;
		}

		public Criteria andBzGreaterThanOrEqualTo(String value) {
			addCriterion("BZ >=", value, "bz");
			return this;
		}

		public Criteria andBzLessThan(String value) {
			addCriterion("BZ <", value, "bz");
			return this;
		}

		public Criteria andBzLessThanOrEqualTo(String value) {
			addCriterion("BZ <=", value, "bz");
			return this;
		}

		public Criteria andBzLike(String value) {
			addCriterion("BZ like", value, "bz");
			return this;
		}

		public Criteria andBzNotLike(String value) {
			addCriterion("BZ not like", value, "bz");
			return this;
		}

		public Criteria andBzIn(List values) {
			addCriterion("BZ in", values, "bz");
			return this;
		}

		public Criteria andBzNotIn(List values) {
			addCriterion("BZ not in", values, "bz");
			return this;
		}

		public Criteria andBzBetween(String value1, String value2) {
			addCriterion("BZ between", value1, value2, "bz");
			return this;
		}

		public Criteria andBzNotBetween(String value1, String value2) {
			addCriterion("BZ not between", value1, value2, "bz");
			return this;
		}
	}
}